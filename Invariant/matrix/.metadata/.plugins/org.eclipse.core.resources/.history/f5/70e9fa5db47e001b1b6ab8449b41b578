import java.util.*;

/**
 * 
 * @author utkarsh.singh_metacu
 * represents a sparse matrix
 * NOTE: It is considered that we store
 * 		 the matrix in sorted order, since 
 * 		 user always provides the full matrix with zeros
 * 		 hence, we store the indices in sorted order.
 */
public class SparseMatrix {
	private List<ArrayList<Pair>> matrix = new ArrayList<ArrayList<Pair>>();
	private int dimension = 0;
	SparseMatrix(List<ArrayList<Pair>>  matrix, int dimension){
		this.matrix = matrix;
		this.dimension = dimension;
	}
	public List<ArrayList<Pair>> transpose(){
		List<ArrayList<Pair>> transposeMatrix = new ArrayList<ArrayList<Pair>>();
		for(int i = 0 ; i < dimension ; i++){
			if(this.matrix.get(i) != null){
				for(int j = 0 ; j < matrix.get(i).size() ; j++){
					if(transposeMatrix.get(this.matrix.get(i).get(j).getIndex()) == null){
						ArrayList<Pair> firstInsertion = new ArrayList<Pair>();
						Pair complementValue = new Pair(i , this.matrix.get(i).get(j).getValue());
						firstInsertion.set(0, complementValue);
						transposeMatrix.add(this.matrix.get(i).get(j).getIndex(), firstInsertion);
					}
					else {
						Pair complementValue = new Pair(i,this.matrix.get(i).get(j).getValue());
						transposeMatrix.get(this.matrix.get(i).get(j).getIndex()).add(complementValue);
					}
				}
			}
		}
		return transposeMatrix;
	}
	private boolean checkEmpty(List<Pair> lst){
		if(lst == null){
			return true;
		}
		return false;
	}
	public boolean isSymmetric(){
		List<ArrayList<Pair>> transpose = this.transpose();
		for(int i = 0 ; i < dimension ; i++){
			if((transpose.get(i) == null && matrix.get(i) != null) || 
					(transpose.get(i) != null && matrix.get(i) == null) ||
					(transpose.get(i).size() != matrix.get(i).size())){
				return false;
			}
			for(int j = 0 ; j < matrix.get(i).size() ; j++) {
				if(matrix.get(i).get(j).getValue() != transpose.get(i).get(j).getValue()){
					return false;
				}
			}
		}
		return true;
	}
	public List<ArrayList<Pair>> add(List<ArrayList<Pair>> mat){
		List<ArrayList<Pair>> addMatrix = new ArrayList<ArrayList<Pair>>();
		for(int i = 0 ; i < Math.max(this.matrix.size(), mat.size());i++){
			if(i < Math.min(this.matrix.size(), mat.size())){
				int colSize = Math.max(this.matrix.get(i).size(), mat.get(i).size());
				for(int j = 0 ; j < colSize ; j++){
					if(this.matrix.get(i).size() == 0){
						if(checkEmpty(addMatrix.get(i))){
							Pair addResult = new Pair(mat.get(i).get(j).getIndex(), mat.get(i).get(j).getValue());
							ArrayList<Pair>firstList = new ArrayList<Pair>();
							firstList.add(addResult);
							addMatrix.add(i, firstList);
						}
						else{
							Pair addResult = new Pair(mat.get(i).get(j).getIndex(), mat.get(i).get(j).getValue());
							addMatrix.get(i).add(addResult);
						}
					}
					else if(mat.get(i).size() == 0){
						if(checkEmpty(addMatrix.get(i))){
							Pair addResult = new Pair(this.matrix.get(i).get(j).getIndex(), this.matrix.get(i).get(j).getValue());
							ArrayList<Pair>firstList = new ArrayList<Pair>();
							firstList.add(addResult);
							addMatrix.add(i, firstList);
						}
						else{
							Pair addResult = new Pair(this.matrix.get(i).get(j).getIndex(), this.matrix.get(i).get(j).getValue());
							addMatrix.get(i).add(addResult);
						}
					}
					else if(this.matrix.get(i).get(j).getIndex() == mat.get(i).get(j).getIndex()){
						if(checkEmpty(addMatrix.get(i))){
							Pair addResult = new Pair(mat.get(i).get(j).getIndex(), mat.get(i).get(j).getValue()+matrix.get(i).get(j).getValue());
							ArrayList<Pair>firstList = new ArrayList<Pair>();
							firstList.add(addResult);
							addMatrix.add(i, firstList);
						}
						else{
							Pair addResult = new Pair(mat.get(i).get(j).getIndex(), mat.get(i).get(j).getValue()+matrix.get(i).get(j).getValue());
							addMatrix.get(i).add(addResult);
						}
					}
					else{
						if(checkEmpty(addMatrix.get(i))){
							Pair addResult1 = new Pair(mat.get(i).get(j).getIndex(), mat.get(i).get(j).getValue());
							Pair addResult2 = new Pair(matrix.get(i).get(j).getIndex(), matrix.get(i).get(j).getValue());
							ArrayList<Pair>firstList = new ArrayList<Pair>();
							firstList.add(addResult1);
							firstList.add(addResult2);
							addMatrix.add(i, firstList);
						}
						else{
							Pair addResult1 = new Pair(mat.get(i).get(j).getIndex(), mat.get(i).get(j).getValue());
							Pair addResult2 = new Pair(matrix.get(i).get(j).getIndex(), matrix.get(i).get(j).getValue());
							addMatrix.get(i).add(addResult2);
							addMatrix.get(i).add(addResult1);
						}
					}
				}
			}
			else{
				if(Math.max(this.matrix.size(), mat.size()) == this.matrix.size()){
					addMatrix.set(i, this.matrix.get(i));
				}
				else if(Math.max(this.matrix.size(), mat.size()) == mat.size()){
					addMatrix.set(i, mat.get(i));
				}
			}
			
		}
		return addMatrix;
	}
}
