import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.*;
public class Triangle implements Shape {
	private Point origin;
	private Point apex;
	private List<Double> baseHeightApex;
	private String timeStamp;
	Triangle(Point origin, List<Double> baseHeight, Point apex){
		this.origin = origin;
		this.baseHeightApex = baseHeight;
		this.timeStamp = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss")
				   .format(LocalDateTime.now());
		this.apex = apex;
	}
	@Override
	public String getTimeStamp() {
		return this.timeStamp;
	}

	@Override
	public String shapeType() {
		return "Triangle";
	}

	@Override
	public double getArea() {
		return (this.baseHeightApex.get(0)*this.baseHeightApex.get(1))/2;
	}

	@Override
	public double getPerimeter() {
		Point a = this.origin;
		Point b = new Point(origin.getX()+this.baseHeightApex.get(0),origin.getY());
		Point c = this.apex;
		double distAB = Math.sqrt(Math.pow(a.getX()-b.getX(), 2)+
				Math.pow(a.getY()-b.getY(), 2));
		double distBC = Math.sqrt(Math.pow(b.getX()-c.getX(), 2)+
				Math.pow(b.getY()-c.getY(), 2));
		double distAC = Math.sqrt(Math.pow(a.getX()-c.getX(), 2)+
				Math.pow(a.getY()-c.getY(), 2));
		return (distAB + distBC + distAC);
	}

	@Override
	public Point getOrigin() {
		return this.origin;
	}

	@Override
	public boolean isPointEnclosed(Point checkPoint) {
		if(checkPoint.getX() >= this.origin.getX() && checkPoint.getX() <= 
				this.origin.getX()+this.baseHeightApex.get(0) && 
				checkPoint.getY()<=apex.getY() && 
				(checkPoint.getY()-this.origin.getY())
				/checkPoint.getX()-this.origin.getX() <= this.apex.getY()-this.origin.getY()/
				this.apex.getX()-this.origin.getX()) {
			return true;
		}
		return false;
	}

}
