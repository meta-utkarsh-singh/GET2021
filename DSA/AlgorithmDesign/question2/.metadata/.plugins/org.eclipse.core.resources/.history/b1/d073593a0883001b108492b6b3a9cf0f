package org.get.employeeSort;
public class Sort {
	/**
	 * 
	 * @param l list to be sorted
	 * @return sorted list based on employee salary and age
	 */
	public LinkedList sort(LinkedList l){
		if(l.getHead().getNext() == null){
			return l;
		}
		Node i = l.getHead();
		LinkedList sorted = new LinkedList();
		while(i.getNext() != null){
			if(sorted.getHead() == null && i == l.getHead()){
				sorted.insert(i);
				i = i.getNext();
				continue;
			}
			Node j = sorted.getHead();
			while(j.getNext()!=null && j.getEmployee().getSalary() <
					i.getEmployee().getSalary()){
				j=j.getNext();
			}
			Node newNode = new Node(new Employee(i.getEmployee()
					.getName(),i.getEmployee().getAge(),
					i.getEmployee().getSalary()));
			if(j.getEmployee().getSalary() == i.getEmployee().getSalary()){
				if(j.getNext() == null){
					if(j.getEmployee().getAge() <= i.getEmployee().getAge()){
						j.setNext(newNode);
					}
					else {
						Node k = sorted.getHead();
						while(k.getNext()!=j && k.getNext()!=null){
							k = k.getNext();
						}
						if(k == sorted.getHead()){
							newNode.setNext(k);
							sorted.setHead(newNode);
						}
						else{
							newNode.setNext(k.getNext());
							k.setNext(newNode);
						}
					}
				}
				else {
					if(j.getEmployee().getAge() <= i.getEmployee().getAge()){
						newNode.setNext(j.getNext());
						j.setNext(newNode);
					}
					else {
						Node k = sorted.getHead();
						while(k.getNext()!=j && k.getNext()!=null){
							k = k.getNext();
						}
						if(k == sorted.getHead()){
							newNode.setNext(k);
							sorted.setHead(newNode);
						}
						else{
							newNode.setNext(k.getNext());
							k.setNext(newNode);
						}
					}
				}
			}
			else if(j.getNext() == null && j.getEmployee().getSalary() <
					i.getEmployee().getSalary()){
				j.setNext(newNode);
			}
			else if(j.getEmployee().getSalary() >
					i.getEmployee().getSalary()) {
				Node k = sorted.getHead();
				while(k.getNext() != j){
					k = k.getNext();
				}
				newNode.setNext(k.getNext());
				k.setNext(newNode);
			}
			i = i.getNext();
		}
		return sorted;
	}
	
}
